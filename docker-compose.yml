services:
  # image_process_extractor:
  #   build:
  #     context: ./ExtractAndTransform/src/image_processing_extract/
  #     dockerfile: Dockerfile
  #   container_name: image_process_extractor
  #   env_file:
  #     - path: ExtractAndTransform/src/image_processing_extract/.env
  #     - path: ./ExtractAndTransform/docker/docker_envs/image_process_extractor.env
  #   volumes:
  #     - ./ExtractAndTransform/docker/logs/image_process_extractor:/app/logs
  #     - satellite_images:/app/resources/roof_satellite/pictures
  #   depends_on:
  #     mongodb:
  #       condition: service_started
  #     localstack_container:
  #       condition: service_healthy
  #     create_bucket:
  #       condition: service_completed_successfully

  upload_images_webpage:
    build:
      context: ./ExtractAndTransform/src/upload_images/
      dockerfile: Dockerfile
    container_name: upload_images_webpage
    ports:
      - "8842:80"
    volumes:
      - satellite_images:/app/uploads

  # news_extractor:
  #   build:
  #     context: ./ExtractAndTransform/src/news_extract/
  #     dockerfile: Dockerfile
  #   container_name: news_extractor
  #   env_file:
  #     - path: ExtractAndTransform/src/news_extract/.env
  #     - path: ./ExtractAndTransform/docker/docker_envs/news_extractor.env
  #   volumes:
  #     - ./ExtractAndTransform/docker/logs/news_extractor:/app/logs
  #   depends_on:
  #     - timescaledb
  #     - mongodb

  # stock_market_extractor:
  #   build:
  #     context: ./ExtractAndTransform/src/stock_market_extract/
  #     dockerfile: Dockerfile
  #   container_name: stock_market_extractor
  #   env_file:
  #     - path: ExtractAndTransform/src/stock_market_extract/.env
  #     - path: ./ExtractAndTransform/docker/docker_envs/stock_market_extractor.env
  #   environment:
  #     - TZ=America/New_York
  #   volumes:
  #     - ./ExtractAndTransform/docker/logs/stock_market_extractor:/app/logs
  #   depends_on:
  #     timescaledb:
  #       condition: service_healthy

  # restart the image_process_extractor and 
  # news_extractor and stock_market_extractor
  # once a week
  # not tested yet
  # restarter:
  #   image: docker:cli
  #   restart: unless-stopped
  #   volumes: ["/var/run/docker.sock:/var/run/docker.sock"]
  #   entrypoint: ["/bin/sh", "-c"]
  #   command:
  #     - |
  #       while true; do
  #         if [ "$$(date +'%u')" -eq 7 ] && [ "$$(date +'%H:%M')" = '20:00' ]; then
  #           docker restart news_extractor
  #           docker restart image_process_extractor
  #           docker restart stock_market_extractor
  #         fi
  #         sleep 60
  #       done

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=satellite-image
    volumes:
      - mongo_data:/data/db

  localstack_container:
      image: localstack/localstack
      container_name: localstack_container
      ports:
        - "4566:4566"
        - "4571:4571"
      environment:
        - SERVICES=s3
        - AWS_ACCESS_KEY_ID=test
        - AWS_SECRET_ACCESS_KEY=test
      command: [ "localstack", "start" ]

  create_bucket:
     image: amazon/aws-cli
     container_name: create_bucket
     depends_on:
       - localstack_container
     entrypoint: ["sh", "-c"]
     command: |
       "sleep 8 && \
        aws --endpoint-url=http://host.docker.internal:4566 s3api create-bucket --bucket satellite-image --region us-east-1 && \
        aws --endpoint-url=http://host.docker.internal:4566 s3 cp /var/lib/localstack s3://satellite-image/ --recursive"
     environment:
       - AWS_ACCESS_KEY_ID=test
       - AWS_SECRET_ACCESS_KEY=test
     volumes:
       - ./Staging/src/image_processing_extract/resources/roof_satellite/pictures:/var/lib/localstack

  timescaledb:
    image: timescale/timescaledb:latest-pg16
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=stock_data
      - PGUSER=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./ExtractAndTransform/docker/sql/create_tables.sql:/docker-entrypoint-initdb.d/initdb.sql
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongo_data:
  timescaledb_data:
  satellite_images:
